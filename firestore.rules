/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for member-related data,
 * with admin override capabilities. It leverages structural segregation and
 * denormalization to ensure secure and efficient data access control.
 *
 * Data Structure:
 * - Members: Root collection, each document represents a member.
 * - Transactions: Subcollection of Members, stores transaction history.
 * - EventModels: Root collection, stores event templates.
 * - EventRegistrations: Subcollection of Members, stores event registrations.
 * - CandleSaleModels: Root collection, stores candle sale templates.
 * - CandleSales: Subcollection of Members, stores candle sales.
 * - ShopProducts: Root collection, stores products for sale.
 * - ShopSales: Root collection, stores sales records, includes `memberId`.
 * - Cerfas: Root collection, stores CERFA receipt data.
 * - roles_admin: Root collection, existence of a document grants admin privileges.
 * - appSettings: Root collection, stores counters for Cerfa generation.
 *
 * Key Security Decisions:
 * - Members can only access their own data (transactions, event registrations, candle sales).
 * - Only admins can create/modify/delete members.
 * - Only admins can create/modify/delete event models, candle sale models, and shop products.
 * - Shop sales include a `memberId` to track which member made the purchase.
 * - CERFA receipts are publicly accessible.
 * - No user listing is allowed for the `members` collection.
 *
 * Denormalization for Authorization:
 * - The `shopSales` collection denormalizes the `memberId` field to allow rules to
 *   quickly determine ownership without additional reads.
 *
 * Structural Segregation:
 * - Private member data is stored under `/members/{memberId}`, while public data
 *   (e.g., event models, shop products) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects access to annual CERFA counters under app settings.
     * @path /appSettings/cerfaCounters
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Admin-only access to CERFA counters.
     */
    match /appSettings/cerfaCounters {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages admin user roles. Only admins can create, update, or delete admin roles.
     * @path /roles_admin/{userId}
     * @allow get: if isAdmin();
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @deny get: if !isAdmin();
     * @deny list: if !isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Enforces role-based access control for admin privileges.
     */
    match /roles_admin/{userId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages member data. Only admins can create, update, or delete members.
     * @path /members/{memberId}
     * @allow get: if isAdmin();
     * @allow list: if false; // No user listing allowed
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @deny get: if !isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Enforces role-based access control for member management.
     */
    match /members/{memberId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages transaction data for a specific member.
     * @path /members/{memberId}/transactions/{transactionId}
     * @allow get: if isOwner(memberId);
     * @allow list: if isOwner(memberId);
     * @allow create: if isOwner(memberId);
     * @allow update: if isExistingOwner(memberId);
     * @allow delete: if isExistingOwner(memberId);
     * @deny get: if !isOwner(memberId);
     * @deny create: if !isOwner(memberId);
     * @deny update: if !isExistingOwner(memberId);
     * @deny delete: if !isExistingOwner(memberId);
     * @principle Enforces document ownership for transaction data.
     */
    match /members/{memberId}/transactions/{transactionId} {
      allow get: if isOwner(memberId);
      allow list: if isOwner(memberId);
      allow create: if isOwner(memberId);
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Manages event model data. Only admins can create, update, or delete event models.
     * @path /eventModels/{eventModelId}
     * @allow get: if true;
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isExistingAdmin();
     * @allow delete: if isExistingAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isExistingAdmin();
     * @deny delete: if !isExistingAdmin();
     * @principle Enforces role-based access control for event model management.
     */
    match /eventModels/{eventModelId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages event registration data for a specific member.
     * @path /members/{memberId}/eventRegistrations/{eventRegistrationId}
     * @allow get: if isOwner(memberId);
     * @allow list: if isOwner(memberId);
     * @allow create: if isOwner(memberId);
     * @allow update: if isExistingOwner(memberId);
     * @allow delete: if isExistingOwner(memberId);
     * @deny get: if !isOwner(memberId);
     * @deny create: if !isOwner(memberId);
     * @deny update: if !isExistingOwner(memberId);
     * @deny delete: if !isExistingOwner(memberId);
     * @principle Enforces document ownership for event registration data.
     */
    match /members/{memberId}/eventRegistrations/{eventRegistrationId} {
      allow get: if isOwner(memberId);
      allow list: if isOwner(memberId);
      allow create: if isOwner(memberId);
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Manages candle sale model data. Only admins can create, update, or delete candle sale models.
     * @path /candleSaleModels/{candleSaleModelId}
     * @allow get: if true;
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isExistingAdmin();
     * @allow delete: if isExistingAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isExistingAdmin();
     * @deny delete: if !isExistingAdmin();
     * @principle Enforces role-based access control for candle sale model management.
     */
    match /candleSaleModels/{candleSaleModelId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages candle sale data for a specific member.
     * @path /members/{memberId}/candleSales/{candleSaleId}
     * @allow get: if isOwner(memberId);
     * @allow list: if isOwner(memberId);
     * @allow create: if isOwner(memberId);
     * @allow update: if isExistingOwner(memberId);
     * @allow delete: if isExistingOwner(memberId);
     * @deny get: if !isOwner(memberId);
     * @deny create: if !isOwner(memberId);
     * @deny update: if !isExistingOwner(memberId);
     * @deny delete: if !isExistingOwner(memberId);
     * @principle Enforces document ownership for candle sale data.
     */
    match /members/{memberId}/candleSales/{candleSaleId} {
      allow get: if isOwner(memberId);
      allow list: if isOwner(memberId);
      allow create: if isOwner(memberId);
      allow update: if isExistingOwner(memberId);
      allow delete: if isExistingOwner(memberId);
    }

    /**
     * @description Manages shop product data. Only admins can create, update, or delete shop products.
     * @path /shopProducts/{shopProductId}
     * @allow get: if true;
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isExistingAdmin();
     * @allow delete: if isExistingAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isExistingAdmin();
     * @deny delete: if !isExistingAdmin();
     * @principle Enforces role-based access control for shop product management.
     */
    match /shopProducts/{shopProductId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages shop sale data. Shop sales are accessible to all members.
     * @path /shopSales/{shopSaleId}
     * @allow get: if true;
     * @allow list: if isAdmin();
     * @allow create: if true; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows all members to view shop sales.
     */
    match /shopSales/{shopSaleId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if true; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages CERFA receipt data. CERFA receipts are publicly accessible.
     * @path /cerfas/{cerfaId}
     * @allow get: if true;
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isExistingAdmin();
     * @allow delete: if isExistingAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isExistingAdmin();
     * @deny delete: if !isExistingAdmin();
     * @principle Allows all members to view CERFA receipts.
     */
    match /cerfas/{cerfaId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of an existing resource.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if an existing document has admin permissions.
     * @returns {boolean} True if the document exists and the user is an admin, false otherwise.
     */
    function isExistingAdmin() {
      return isAdmin() && resource != null;
    }
  }
}