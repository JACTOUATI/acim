/**
 * @fileoverview Firestore Security Rules for ACIM Association.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for member-related data
 * (transactions, event registrations, candle sales). Only authenticated users
 * can access their own data. Administrative access is granted based on
 * membership in the `roles_admin` collection. Public read access is granted
 * for a few collections.
 *
 * Data Structure:
 * - /members/{memberId}: Stores member profile information.
 * - /members/{memberId}/transactions/{transactionId}: Stores transaction history for each member.
 * - /eventModels/{eventModelId}: Stores event templates.
 * - /members/{memberId}/eventRegistrations/{eventRegistrationId}: Stores event registrations for each member.
 * - /candleSaleModels/{candleSaleModelId}: Stores candle sale templates.
 * - /members/{memberId}/candleSales/{candleSaleId}: Stores candle sales for each member.
 * - /shopProducts/{shopProductId}: Stores product information for the shop.
 * - /shopSales/{shopSaleId}: Stores sales records for the shop, associated with a member if applicable.
 * - /cerfas/{cerfaId}: Stores CERFA receipt information.
 * - /roles_admin/{userId}: Stores admin role information. Document ID represents the user's UID.
 *
 * Key Security Decisions:
 * - Only admins can create, update, or delete members.
 * - Users can only access their own transactions, event registrations, and candle sales.
 * - Public read access is granted for event models, candle sale models and shop products
 * - Only admins can create, update or delete event models, candle sale models and shop products
 * - Only admins can create cerfas
 * - Listing of all members, transactions, event registrations, candle sales, shop products and shop sales are restricted to admin users only.
 *
 * Denormalization for Authorization:
 * The shopSales collection includes the `memberId` for authorization, which helps avoid costly `get()` calls to the `members` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to manage members.
     * @path /members/{memberId}
     * @allow (create, update, delete) if request.auth != null && isAdmin()
     * @allow (get) if request.auth != null && isAdmin()
     * @allow (list) if request.auth != null && isAdmin()
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Enforces admin-only access for member management.
     */
    match /members/{memberId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Allows a member to manage their own transactions.
     * @path /members/{memberId}/transactions/{transactionId}
     * @allow (create) if request.auth != null && isOwner(memberId)
     * @allow (update) if request.auth != null && isOwner(memberId)
     * @allow (delete) if request.auth != null && isOwner(memberId)
     * @allow (get) if request.auth != null && isOwner(memberId)
     * @allow (list) if request.auth != null && isOwner(memberId)
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isOwner(memberId)
     * @deny (update) if !isOwner(memberId)
     * @deny (delete) if !isOwner(memberId)
     * @principle Enforces user-ownership for transactions.
     */
    match /members/{memberId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(memberId);
      allow list: if isSignedIn() && isOwner(memberId);
      allow create: if isSignedIn() && isOwner(memberId);
      allow update: if isSignedIn() && isOwner(memberId) && resource != null;
      allow delete: if isSignedIn() && isOwner(memberId) && resource != null;
    }

    /**
     * @description Allows public read access to event models, but restricts modifications to admins.
     * @path /eventModels/{eventModelId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if request.auth != null && isAdmin()
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Allows public read access while enforcing admin-only writes.
     */
    match /eventModels/{eventModelId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Allows a member to manage their own event registrations.
     * @path /members/{memberId}/eventRegistrations/{eventRegistrationId}
     * @allow (create) if request.auth != null && isOwner(memberId)
     * @allow (update) if request.auth != null && isOwner(memberId)
     * @allow (delete) if request.auth != null && isOwner(memberId)
     * @allow (get) if request.auth != null && isOwner(memberId)
     * @allow (list) if request.auth != null && isOwner(memberId)
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isOwner(memberId)
     * @deny (update) if !isOwner(memberId)
     * @deny (delete) if !isOwner(memberId)
     * @principle Enforces user-ownership for event registrations.
     */
    match /members/{memberId}/eventRegistrations/{eventRegistrationId} {
      allow get: if isSignedIn() && isOwner(memberId);
      allow list: if isSignedIn() && isOwner(memberId);
      allow create: if isSignedIn() && isOwner(memberId);
      allow update: if isSignedIn() && isOwner(memberId) && resource != null;
      allow delete: if isSignedIn() && isOwner(memberId) && resource != null;
    }

    /**
     * @description Allows public read access to candle sale models, but restricts modifications to admins.
     * @path /candleSaleModels/{candleSaleModelId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if request.auth != null && isAdmin()
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Allows public read access while enforcing admin-only writes.
     */
    match /candleSaleModels/{candleSaleModelId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Allows a member to manage their own candle sales.
     * @path /members/{memberId}/candleSales/{candleSaleId}
     * @allow (create) if request.auth != null && isOwner(memberId)
     * @allow (update) if request.auth != null && isOwner(memberId)
     * @allow (delete) if request.auth != null && isOwner(memberId)
     * @allow (get) if request.auth != null && isOwner(memberId)
     * @allow (list) if request.auth != null && isOwner(memberId)
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isOwner(memberId)
     * @deny (update) if !isOwner(memberId)
     * @deny (delete) if !isOwner(memberId)
     * @principle Enforces user-ownership for candle sales.
     */
    match /members/{memberId}/candleSales/{candleSaleId} {
      allow get: if isSignedIn() && isOwner(memberId);
      allow list: if isSignedIn() && isOwner(memberId);
      allow create: if isSignedIn() && isOwner(memberId);
      allow update: if isSignedIn() && isOwner(memberId) && resource != null;
      allow delete: if isSignedIn() && isOwner(memberId) && resource != null;
    }

    /**
     * @description Allows public read access to shop products, but restricts modifications to admins.
     * @path /shopProducts/{shopProductId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if request.auth != null && isAdmin()
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Allows public read access while enforcing admin-only writes.
     */
    match /shopProducts/{shopProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage shop sales.  Members can only manage their own shop sales if the shop sale has a matching memberId.
     * @path /shopSales/{shopSaleId}
     * @allow (create) if request.auth != null && (isAdmin() || request.resource.data.memberId == request.auth.uid)
     * @allow (update) if request.auth != null && (isAdmin() || resource.data.memberId == request.auth.uid)
     * @allow (delete) if request.auth != null && (isAdmin() || resource.data.memberId == request.auth.uid)
     * @allow (get) if request.auth != null && (isAdmin() || resource.data.memberId == request.auth.uid)
     * @allow (list) if request.auth != null && isAdmin()
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isAdmin() && request.resource.data.memberId != request.auth.uid
     * @deny (update) if !isAdmin() && resource.data.memberId != request.auth.uid
     * @deny (delete) if !isAdmin() && resource.data.memberId != request.auth.uid
     * @principle Enforces admin-only access for general shop sales, and user-ownership for member-related sales.
     */
    match /shopSales/{shopSaleId} {
      allow get: if isSignedIn() && (isAdmin() || resource.data.memberId == request.auth.uid);
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && (isAdmin() || request.resource.data.memberId == request.auth.uid);
      allow update: if isSignedIn() && (isAdmin() || resource.data.memberId == request.auth.uid) && resource != null;
      allow delete: if isSignedIn() && (isAdmin() || resource.data.memberId == request.auth.uid) && resource != null;
    }

    /**
     * @description Allows admins to manage CERFA receipts.
     * @path /cerfas/{cerfaId}
     * @allow (create, update, delete) if request.auth != null && isAdmin()
     * @allow (get) if request.auth != null && isAdmin()
     * @allow (list) if request.auth != null && isAdmin()
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Enforces admin-only access for CERFA receipt management.
     */
    match /cerfas/{cerfaId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage admin roles.
     * @path /roles_admin/{userId}
     * @allow (create, update, delete) if request.auth != null && isAdmin()
     * @allow (get) if request.auth != null && isAdmin()
     * @allow (list) if request.auth != null && isAdmin()
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Enforces admin-only access for admin role management.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage CERFA counters.
     * @path /appSettings/cerfaCounters
     * @allow (create, update, delete) if request.auth != null && isAdmin()
     * @allow (get) if request.auth != null && isAdmin()
     * @allow (list) if request.auth != null && isAdmin()
     * @deny (create) if request.auth == null
     * @deny (update) if request.auth == null
     * @deny (delete) if request.auth == null
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Enforces admin-only access for CERFA counter management.
     */
    match /appSettings/cerfaCounters {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}